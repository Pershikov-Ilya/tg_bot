import os
import logging

from stock import get_price
from foreign_stocks import get_foreign_stock_data, get_course_of_currency, get_foreign_stock_data_for_info
from crypto import get_crypto_price
from weaher import get_weather

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import BotCommand


from loguru import logger as log

token_for_TgBot = os.getenv("tg_api_token")
api_token = os.getenv("TKS_API_TOKEN")


bot = Bot(token=token_for_TgBot)
dp = Dispatcher(bot=bot)


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="/ticker", description="–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∞–∫—Ü–∏–∏ –ø–æ —Ç–∏–∫–µ—Ä—É"),
        BotCommand(command="/foreign_ticker", description="–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Ä—É–±–µ–∂–Ω—ã—Ö –∞–∫—Ü–∏—è—Ö"),
        BotCommand(command="/crypto", description="–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"),
        BotCommand(command="/weather", description="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"),
        BotCommand(command="/info", description="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö –∏ –ø–æ–≥–æ–¥–µ")
    ]
    await bot.set_my_commands(commands)

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    log.info("Received /start command")
    await message.answer("–ü—Ä–∏–≤–µ—Ç!")
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /info –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –∏ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç.")


@dp.message_handler(commands=["ticker"])
async def cmd_ticker(message: types.Message):
    log.info(f"Received /ticker command with args: {message.text}")
    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /ticker <—Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏>")
        return

    ticker = args[-1]
    price = get_price(api_token, ticker)
    await message.answer(f"–¶–µ–Ω–∞ –∞–∫—Ü–∏–∏ {ticker}: {price} rub")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ü–∏—è—Ö —á–µ—Ä–µ–∑ Yahoo Finance API


@dp.message_handler(commands=["foreign_ticker"])
async def foreign_ticker(message: types.Message):
    log.info("Received /foreign command")
    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /foreign_ticker <—Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏>")
        return
    ticker = args[-1]
    latest_data = get_foreign_stock_data(ticker)
    await message.answer(latest_data)


@dp.message_handler(commands=["crypto"])
async def cmd_crypto(message: types.Message):
    log.info(f"Received /crypto command with args: {message.text}")
    args = message.text.split()

    if len(args) != 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /crypto <id_–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã>")
        return

    currency = args[1].lower()
    price_data = get_crypto_price(currency)
    await message.answer(price_data)

@dp.message_handler(commands=["weather"])
async def cmd_weather(message: types.Message):
    log.info(f"Received /weather command with args: {message.text}")
    args = message.text.split()

    if len(args) != 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /weather <–≥–æ—Ä–æ–¥>")
        return

    city_name = args[1]
    weather_data = get_weather(city_name)
    await message.answer(weather_data)

# –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /info
@dp.message_handler(commands=["info"])
async def cmd_info(message: types.Message):
    await message.answer("–ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–∞—Ä—É —Å–µ–∫")
    log.info(f"Received /info command")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö
    btc_price = get_crypto_price("bitcoin")
    eth_price = get_crypto_price("ethereum")
    Tether_price = get_crypto_price("usdt")
    Toncoin_price = get_crypto_price("ton")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç (–ø—Ä–∏–º–µ—Ä —Å USD –∏ EUR)
    usd_price = get_course_of_currency("RUB=X")
    eur_price = get_course_of_currency("EURRUB=X")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ –∞–∫—Ü–∏–∏
    AAPL_price = get_foreign_stock_data_for_info("AAPL")
    NVDA_price = get_foreign_stock_data_for_info("NVDA")

    lkoh_price = get_price(api_token, "LKOH")
    sber_price = get_price(api_token, "SBER")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö
    Tver_weather = get_weather("Tver")
    Saint_Petersburg_weather = get_weather("Saint Petersburg")
    Mexico_City_weather = get_weather("Mexico City")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response_message = (
        f"ü§ë –ö—É—Ä—Å BTC: {btc_price}\n"
        f"ü§ë –ö—É—Ä—Å ETH: {eth_price}\n"
        f"ü§ë –ö—É—Ä—Å USDT: {Tether_price}\n"
        f"ü§ë –ö—É—Ä—Å TON: {Toncoin_price}\n\n"
        f"üí∏ –ö—É—Ä—Å USD: {usd_price}\n"
        f"üí∏ –ö—É—Ä—Å EUR: {eur_price}\n\n"
        f"üìà –ö—É—Ä—Å –∞–∫—Ü–∏–π AAPL: {AAPL_price}\n"
        f"üìà –ö—É—Ä—Å –∞–∫—Ü–∏–π NVDA: {NVDA_price}\n"
        f"üìà –ö—É—Ä—Å –∞–∫—Ü–∏–π LKOH: {lkoh_price}\n"
        f"üìà –ö—É—Ä—Å –∞–∫—Ü–∏–π SBER: {sber_price}\n\n"
        f"üå° –ü–æ–≥–æ–¥–∞ –≤ Tver: {Tver_weather}\n"
        f"üå° –ü–æ–≥–æ–¥–∞ –≤ Saint Petersburg: {Saint_Petersburg_weather}\n"
        f"üå° –ü–æ–≥–æ–¥–∞ –≤ Mexico City: {Mexico_City_weather}"
    )

    await message.answer(response_message)
if __name__ == '__main__':
    log.info("Starting bot")

    async def on_startup(dp):
        await set_commands(bot)
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)